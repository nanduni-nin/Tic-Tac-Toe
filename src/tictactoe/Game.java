package tictactoe;

import controller.ScoreController;
import java.awt.Color;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import static tictactoe.TicTacToe.boxes;
import org.apache.log4j.*;
import java.io.*;
import java.util.*;

/**
 *
 * @author Nands
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    private String player1;
    private String player2;
    private int noOfPlayers;
    private int chance = 1;
    private Box[] boxes;
    private Board board = new Board();
    private static boolean won = false;
    private boolean cameOnce = false;
    private static org.apache.log4j.Logger logger = org.apache.log4j.Logger.getLogger(Game.class.getName());

    /**
     * Creates new form GameInterface
     */
    public void startGame() {
        boxes = new Box[9];
        for (int i = 0; i < 9; i++) {
            boxes[i] = new Box(i + 1);
        }
    }

    public Game(String player1, String player2, int noOfPlayers) throws FileNotFoundException, IOException {
        initComponents();
        this.setSize(820, 650);

        File imgfile = new File("..\\TicTacToe\\src\\images\\flower.png");
        FileInputStream imgStream = new FileInputStream(imgfile);
        BufferedImage bi = ImageIO.read(imgStream);
        ImageIcon myImg = new ImageIcon(bi);
        this.setIconImage(myImg.getImage());
        setVisible(true);
        this.player1 = player1;
        this.player2 = player2;
        this.noOfPlayers = noOfPlayers;

        if (noOfPlayers == 1) {
            player1Txt.setText(player1);
            player2Txt.setText("Computer");
        } else if (noOfPlayers == 2) {
            player1Txt.setText(player1);
            player2Txt.setText(player2);
        }

        startGame();
        turnTxt.setText("This Turn  :  " + player1);
    }

    private Game() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        boxes1 = new javax.swing.JPanel();
        box31 = new javax.swing.JButton();
        box33 = new javax.swing.JButton();
        box32 = new javax.swing.JButton();
        box21 = new javax.swing.JButton();
        box22 = new javax.swing.JButton();
        box23 = new javax.swing.JButton();
        box12 = new javax.swing.JButton();
        box13 = new javax.swing.JButton();
        box11 = new javax.swing.JButton();
        player2Txt = new javax.swing.JButton();
        turnTxt = new javax.swing.JButton();
        homeBtn = new javax.swing.JButton();
        playAgainBtn = new javax.swing.JButton();
        jButton65 = new javax.swing.JButton();
        jButton67 = new javax.swing.JButton();
        player1Txt = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tic Tac Toe");
        setMaximumSize(null);
        setMinimumSize(null);
        setResizable(false);
        getContentPane().setLayout(null);

        boxes1.setBackground(new java.awt.Color(0, 0, 0));
        boxes1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        box31.setBackground(new java.awt.Color(204, 153, 0));
        box31.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box31.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box31ActionPerformed(evt);
            }
        });

        box33.setBackground(new java.awt.Color(204, 153, 0));
        box33.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box33.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box33ActionPerformed(evt);
            }
        });

        box32.setBackground(new java.awt.Color(204, 153, 0));
        box32.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box32.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box32ActionPerformed(evt);
            }
        });

        box21.setBackground(new java.awt.Color(204, 153, 0));
        box21.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box21ActionPerformed(evt);
            }
        });

        box22.setBackground(new java.awt.Color(204, 153, 0));
        box22.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box22ActionPerformed(evt);
            }
        });

        box23.setBackground(new java.awt.Color(204, 153, 0));
        box23.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box23.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box23ActionPerformed(evt);
            }
        });

        box12.setBackground(new java.awt.Color(204, 153, 0));
        box12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box12ActionPerformed(evt);
            }
        });

        box13.setBackground(new java.awt.Color(204, 153, 0));
        box13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box13ActionPerformed(evt);
            }
        });

        box11.setBackground(new java.awt.Color(204, 153, 0));
        box11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        box11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                box11ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout boxes1Layout = new javax.swing.GroupLayout(boxes1);
        boxes1.setLayout(boxes1Layout);
        boxes1Layout.setHorizontalGroup(
            boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(boxes1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(box11, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box21, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box31, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(box22, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box32, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(box12, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(box23, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(box33, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(box13, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(15, Short.MAX_VALUE))
        );
        boxes1Layout.setVerticalGroup(
            boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, boxes1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(boxes1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addGroup(boxes1Layout.createSequentialGroup()
                            .addComponent(box12, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(box22, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(box32, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(boxes1Layout.createSequentialGroup()
                            .addComponent(box11, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(box21, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(box31, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(boxes1Layout.createSequentialGroup()
                        .addComponent(box13, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(box23, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(box33, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        getContentPane().add(boxes1);
        boxes1.setBounds(340, 120, 440, 411);

        player2Txt.setBackground(new java.awt.Color(204, 51, 0));
        player2Txt.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        player2Txt.setText("Player 2");
        player2Txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 102, 0), 2));
        player2Txt.setEnabled(false);
        player2Txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player2TxtActionPerformed(evt);
            }
        });
        getContentPane().add(player2Txt);
        player2Txt.setBounds(50, 290, 190, 30);

        turnTxt.setBackground(new java.awt.Color(204, 51, 0));
        turnTxt.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        turnTxt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 2));
        turnTxt.setEnabled(false);
        turnTxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                turnTxtActionPerformed(evt);
            }
        });
        getContentPane().add(turnTxt);
        turnTxt.setBounds(340, 540, 440, 30);

        homeBtn.setBackground(new java.awt.Color(204, 51, 0));
        homeBtn.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        homeBtn.setText("Home");
        homeBtn.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        homeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeBtnActionPerformed(evt);
            }
        });
        getContentPane().add(homeBtn);
        homeBtn.setBounds(60, 420, 160, 50);

        playAgainBtn.setBackground(new java.awt.Color(204, 51, 0));
        playAgainBtn.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        playAgainBtn.setText("Play Again");
        playAgainBtn.setBorder(javax.swing.BorderFactory.createCompoundBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true), javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED)));
        playAgainBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAgainBtnActionPerformed(evt);
            }
        });
        getContentPane().add(playAgainBtn);
        playAgainBtn.setBounds(60, 490, 160, 50);

        jButton65.setBackground(new java.awt.Color(153, 51, 0));
        jButton65.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/crosssmall.png"))); // NOI18N
        jButton65.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));
        getContentPane().add(jButton65);
        jButton65.setBounds(200, 180, 39, 39);

        jButton67.setBackground(new java.awt.Color(153, 51, 0));
        jButton67.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/circlesmall.png"))); // NOI18N
        jButton67.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED), new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true)));
        getContentPane().add(jButton67);
        jButton67.setBounds(200, 330, 39, 39);

        player1Txt.setBackground(new java.awt.Color(204, 51, 0));
        player1Txt.setFont(new java.awt.Font("Rockwell Extra Bold", 1, 18)); // NOI18N
        player1Txt.setText("Player 1");
        player1Txt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(204, 102, 0), 2));
        player1Txt.setEnabled(false);
        player1Txt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                player1TxtActionPerformed(evt);
            }
        });
        getContentPane().add(player1Txt);
        player1Txt.setBounds(50, 140, 190, 30);

        jLabel11.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Santa-Claus-Adore-icon.png"))); // NOI18N
        getContentPane().add(jLabel11);
        jLabel11.setBounds(50, 320, 64, 64);

        jLabel9.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Pirate-Smile-icon (1).png"))); // NOI18N
        getContentPane().add(jLabel9);
        jLabel9.setBounds(50, 170, 64, 64);

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/subtle-snowflakes-pattern.png"))); // NOI18N
        jLabel10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 5, true));
        getContentPane().add(jLabel10);
        jLabel10.setBounds(30, 120, 230, 280);

        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pink-ice-cream-bar-background.gif"))); // NOI18N
        getContentPane().add(jLabel7);
        jLabel7.setBounds(0, 590, 300, 60);

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pink-ice-cream-bar-background.gif"))); // NOI18N
        getContentPane().add(jLabel8);
        jLabel8.setBounds(300, 590, 300, 60);

        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/pink-ice-cream-bar-background.gif"))); // NOI18N
        getContentPane().add(jLabel6);
        jLabel6.setBounds(600, 590, 220, 60);

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/cooltext1725048922.png"))); // NOI18N
        getContentPane().add(jLabel4);
        jLabel4.setBounds(170, 10, 448, 90);

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/40yellow.jpg"))); // NOI18N
        getContentPane().add(jLabel3);
        jLabel3.setBounds(320, 0, 500, 360);

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/40yellow.jpg"))); // NOI18N
        getContentPane().add(jLabel2);
        jLabel2.setBounds(0, 0, 500, 360);

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/40yellow.jpg"))); // NOI18N
        getContentPane().add(jLabel1);
        jLabel1.setBounds(0, 220, 500, 400);

        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/40yellow.jpg"))); // NOI18N
        getContentPane().add(jLabel5);
        jLabel5.setBounds(320, 220, 500, 400);

        setSize(new java.awt.Dimension(836, 689));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void box31ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box31ActionPerformed
        if (!box31.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box31.setText(" ");
                    setCrossBackGround(box31);
                    boxes[6].changeClicked(1);
                    board.makeMove(2, 0, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box31);

                } else if (chance == 2) {
                    setCircleBackGround(box31);
                }
                boxes[6].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                       logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box31.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box31ActionPerformed

    private void box32ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box32ActionPerformed
        if (!box32.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box32.setText(" ");
                    setCrossBackGround(box32);
                    boxes[7].changeClicked(1);
                    board.makeMove(2, 1, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box32);

                } else if (chance == 2) {
                    setCircleBackGround(box32);
                }
                boxes[7].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box32.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box32ActionPerformed

    private void box33ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box33ActionPerformed
        if (!box33.getText().equals(" ")) {

            if (noOfPlayers == 1) {
                if (won == false) {
                    box33.setText(" ");
                    setCrossBackGround(box33);
                    boxes[8].changeClicked(1);
                    board.makeMove(2, 2, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box33);

                } else if (chance == 2) {
                    setCircleBackGround(box33);
                }
                boxes[8].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box33.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box33ActionPerformed

    private void box21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box21ActionPerformed
        if (!box21.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box21.setText(" ");
                    setCrossBackGround(box21);
                    boxes[3].changeClicked(1);
                    board.makeMove(1, 0, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box21);

                } else if (chance == 2) {
                    setCircleBackGround(box21);
                }
                boxes[3].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box21.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box21ActionPerformed

    private void box22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box22ActionPerformed

        if (!box22.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box22.setText(" ");
                    setCrossBackGround(box22);
                    boxes[4].changeClicked(1);
                    board.makeMove(1, 1, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {

                if (chance == 1) {
                    setCrossBackGround(box22);

                } else if (chance == 2) {
                    setCircleBackGround(box22);
                }
                boxes[4].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box22.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box22ActionPerformed

    private void box23ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box23ActionPerformed
        if (!box23.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box23.setText(" ");
                    setCrossBackGround(box23);
                    boxes[5].changeClicked(1);
                    board.makeMove(1, 2, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box23);

                } else if (chance == 2) {
                    setCircleBackGround(box23);
                }
                boxes[5].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box23.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box23ActionPerformed

    private void box12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box12ActionPerformed
        if (!box12.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box12.setText(" ");
                    setCrossBackGround(box12);
                    boxes[1].changeClicked(1);
                    board.makeMove(0, 1, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box12);

                } else if (chance == 2) {
                    setCircleBackGround(box12);
                }
                boxes[1].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                } catch (ClassNotFoundException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                }
                box12.setText(" ");
                changePlayer();
            }
        }

    }//GEN-LAST:event_box12ActionPerformed

    private void end() {

        box11.setEnabled(false);
        box12.setEnabled(false);
        box13.setEnabled(false);
        box21.setEnabled(false);
        box22.setEnabled(false);
        box23.setEnabled(false);
        box31.setEnabled(false);
        box32.setEnabled(false);
        box33.setEnabled(false);
        logger.log(org.apache.log4j.Level.INFO, "Game terminates");

    }

    private void box13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box13ActionPerformed
        if (!box13.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box13.setText(" ");
                    setCrossBackGround(box13);
                    boxes[2].changeClicked(1);
                    board.makeMove(0, 2, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box13);

                } else if (chance == 2) {
                    setCircleBackGround(box13);
                }
                boxes[2].changeClicked(chance);

                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                       logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box13.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box13ActionPerformed

    public void setCircleBackGround(JButton button) {
        File imgfile = new File("..\\TicTacToe\\src\\images\\circle.png");
        FileInputStream imgStream = null;
        try {
            imgStream = new FileInputStream(imgfile);
        } catch (FileNotFoundException ex) {
            logger.log(org.apache.log4j.Level.ERROR,"File not found !!!");
        }
        BufferedImage bi = null;
        try {
            bi = ImageIO.read(imgStream);
        } catch (IOException ex) {
            logger.log(org.apache.log4j.Level.DEBUG, "Error in input/output !!!");
        }
        ImageIcon myImg = new ImageIcon(bi);
        button.setIcon(myImg);
    }

    public void setCrossBackGround(JButton button) {
        File imgfile = new File("..\\TicTacToe\\src\\images\\cross2.png");
        FileInputStream imgStream = null;
        try {
            imgStream = new FileInputStream(imgfile);
        } catch (FileNotFoundException ex) {
            logger.log(org.apache.log4j.Level.ERROR,"File not found !!!");
        }
        BufferedImage bi = null;
        try {
            bi = ImageIO.read(imgStream);
        } catch (IOException ex) {
            logger.log(org.apache.log4j.Level.DEBUG, "Error in input/output !!!");
        }
        ImageIcon myImg = new ImageIcon(bi);
        button.setIcon(myImg);
    }

    private void box11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_box11ActionPerformed
        if (!box11.getText().equals(" ")) {
            if (noOfPlayers == 1) {
                if (won == false) {
                    box11.setText(" ");
                    setCrossBackGround(box11);
                    boxes[0].changeClicked(1);
                    board.makeMove(0, 0, 1);
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    } catch (SQLException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                    }
                    changePlayer();
                    if (won) {
                        return;
                    }
                    compMove();
                }
                return;
            }
            if (won == false) {
                if (chance == 1) {
                    setCrossBackGround(box11);

                } else if (chance == 2) {
                    setCircleBackGround(box11);
                }
                boxes[0].changeClicked(chance);
                try {
                    try {
                        checkHit();
                    } catch (ClassNotFoundException ex) {
                        logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
                    }
                } catch (SQLException ex) {
                    logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
                }
                box11.setText(" ");
                changePlayer();
            }
        }
    }//GEN-LAST:event_box11ActionPerformed

    private void homeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeBtnActionPerformed
        this.setVisible(false);

        try {
            try {
                LogIn login = new LogIn();
            } catch (FileNotFoundException ex) {
                logger.log(org.apache.log4j.Level.ERROR,"File not found !!!");
            } catch (ClassNotFoundException ex) {
               logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
            } catch (SQLException ex) {
                logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
            }
        } catch (IOException ex) {
            logger.log(org.apache.log4j.Level.DEBUG, "Error in input/output !!!");
        }

    }//GEN-LAST:event_homeBtnActionPerformed

    private void turnTxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_turnTxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_turnTxtActionPerformed

    private void player2TxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player2TxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player2TxtActionPerformed

    private void player1TxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_player1TxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_player1TxtActionPerformed

    private void playAgainBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAgainBtnActionPerformed
        try {
            this.dispose();
            Game game = new Game(player1, player2, noOfPlayers);
        } catch (IOException ex) {
            logger.log(org.apache.log4j.Level.DEBUG, "Error in input/output !!!");
        }
    }//GEN-LAST:event_playAgainBtnActionPerformed

    public void recordVictory(String name, int marks) throws ClassNotFoundException, SQLException {
        System.out.println(name);
        if (!name.equals("Computer")) {
            ScoreController.updateScore(name, marks);
        }
    }

    public boolean checkHit() throws ClassNotFoundException, SQLException {
        //jumbleBoard();
        if (won) {
            return true;
        }
        for (int i = 0; i < 9; i++) {
            if (i % 3 == 0) {
                //  System.out.println("");
            }
            //System.out.print(boxes[i].getState() + "    ");
        }
        //System.out.println("Checking hit");
        String name, other = null;
        if (noOfPlayers == 2) {
            if (chance == 1) {
                name = player1;
                other = player2;
            } else {
                name = player2;
                other = player2;
            }
        } else {
            if (chance == 1) {
                name = player1;
            } else {
                name = "Computer";
            }
        }

        if (boxes[0].getState() == boxes[1].getState() && boxes[1].getState() == boxes[2].getState() && boxes[1].getState() > 0) {
            box11.setBackground(Color.MAGENTA);
            box12.setBackground(Color.MAGENTA);
            box13.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }
            jumbleBoard();
            return true;
        } else if (boxes[3].getState() == boxes[4].getState() && boxes[4].getState() == boxes[5].getState() && boxes[3].getState() > 0) {

            box21.setBackground(Color.MAGENTA);
            box22.setBackground(Color.MAGENTA);
            box23.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }

            jumbleBoard();
            return true;
        } else if (boxes[6].getState() == boxes[7].getState() && boxes[7].getState() == boxes[8].getState() && boxes[6].getState() > 0) {

            box31.setBackground(Color.MAGENTA);
            box32.setBackground(Color.MAGENTA);
            box33.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }
            jumbleBoard();
            return true;
        } else if (boxes[0].getState() == boxes[3].getState() && boxes[3].getState() == boxes[6].getState() && boxes[0].getState() > 0) {

            box11.setBackground(Color.MAGENTA);
            box21.setBackground(Color.MAGENTA);
            box31.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }
            jumbleBoard();
            return true;
        } else if (boxes[1].getState() == boxes[4].getState() && boxes[4].getState() == boxes[7].getState() && boxes[1].getState() > 0) {

            box12.setBackground(Color.MAGENTA);
            box22.setBackground(Color.MAGENTA);
            box32.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }
            jumbleBoard();
            return true;
        } else if (boxes[2].getState() == boxes[5].getState() && boxes[5].getState() == boxes[8].getState() && boxes[2].getState() > 0) {

            box13.setBackground(Color.MAGENTA);
            box23.setBackground(Color.MAGENTA);
            box33.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }
            jumbleBoard();
            return true;
        } else if (boxes[0].getState() == boxes[4].getState() && boxes[4].getState() == boxes[8].getState() && boxes[0].getState() > 0) {

            box11.setBackground(Color.MAGENTA);
            box22.setBackground(Color.MAGENTA);
            box33.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
            }
            jumbleBoard();
            return true;
        } else if (boxes[2].getState() == boxes[4].getState() && boxes[4].getState() == boxes[6].getState() && boxes[2].getState() > 0) {

            box13.setBackground(Color.MAGENTA);
            box22.setBackground(Color.MAGENTA);
            box31.setBackground(Color.MAGENTA);
            if (name.equals("Computer")) {
                JOptionPane.showMessageDialog(null, "You Lost", "Over", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(player1, 0);
                end();
            } else {
                JOptionPane.showMessageDialog(null, "Well Done. " + player1 + " Won !!!", "Congradulations", JOptionPane.INFORMATION_MESSAGE);
                recordVictory(name, 100);
                recordVictory(other, 0);
                end();
            }
            jumbleBoard();
            return true;
        } else {
            int count = 0;
            for (int i = 0; i < 9; i++) {
                if (boxes[i].clicked == 1) {
                    count++;
                }
            }

            if (count == 9) {
                JOptionPane.showMessageDialog(null, "Draw !!!", "Game Over", JOptionPane.INFORMATION_MESSAGE);
                if (noOfPlayers == 2) {
                    recordVictory(player1, 0);
                    recordVictory(player2, 0);
                } else {
                    recordVictory(player1, 0);
                }
                return false;
            }
            return false;
        }

    }

    private void changePlayer() {
        if (noOfPlayers == 1) {
            if (chance == 1) {
                chance = 2;
            } else {
                chance = 1;
                turnTxt.setText("Try Your Turn");
            }
        } else {
            if (chance == 1) {
                chance = 2;
                turnTxt.setText("This Turn  :  " + player2);
            } else {
                chance = 1;
                turnTxt.setText("This Turn  :  " + player1);
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        logger.log(org.apache.log4j.Level.INFO, "\n****************** TIC TAC TOE ***************** \nGame starts!!!");
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Game().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton box11;
    private javax.swing.JButton box12;
    private javax.swing.JButton box13;
    private javax.swing.JButton box21;
    private javax.swing.JButton box22;
    private javax.swing.JButton box23;
    private javax.swing.JButton box31;
    private javax.swing.JButton box32;
    private javax.swing.JButton box33;
    private javax.swing.JPanel boxes1;
    private javax.swing.JButton homeBtn;
    private javax.swing.JButton jButton65;
    private javax.swing.JButton jButton67;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JButton playAgainBtn;
    private javax.swing.JButton player1Txt;
    private javax.swing.JButton player2Txt;
    private javax.swing.JButton turnTxt;
    // End of variables declaration//GEN-END:variables

    private void compMove() {
        Board[] boards = generateBoards();
        int[] eval = new int[board.countEmpty()];

        for (int i = 0; i < boards.length; i++) {
            eval[i] = boards[i].eval();
        }

        int min = 100;
        int index = 0;

        for (int i = 0; i < boards.length; i++) {
            if (eval[i] < min) {

                min = eval[i];
                index = i;
            }
        }
        if (box11.getText().equals(" ") && box12.getText().equals(" ") && box13.getText().equals(" ") && box21.getText().equals(" ") && box22.getText().equals(" ") && box23.getText().equals(" ") && box31.getText().equals(" ") && box32.getText().equals(" ") && box33.getText().equals(" ")) {
            return;
        }
        int[][] oldBoard = boards[index].getBoard();
        int[][] newBoard = board.getBoard();
        int I = 20;
        int J = 20;

        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                if (oldBoard[i][j] != newBoard[i][j]) {
                    I = i;
                    J = j;
                }
            }
        }
        //System.out.println("I J old " + I + " " + J);
        if (boxes[0].getState() == 1 && boxes[8].getState() == 1 || boxes[2].getState() == 1 && boxes[6].getState() == 1) {
            if (boxes[4].getState() == 2 && !cameOnce) {
                if (boxes[1].getState() == -1) {
                    I = 0;
                    J = 1;
                    cameOnce = true;
                } else if (boxes[3].getState() == -1) {
                    I = 1;
                    J = 0;
                    cameOnce = true;
                } else if (boxes[5].getState() == -1) {
                    I = 1;
                    J = 2;
                    cameOnce = true;
                } else if (boxes[7].getState() == -1) {
                    I = 2;
                    J = 1;
                    cameOnce = true;
                }

            }
        }
        //try not to loose part 2

        if (boxes[3].getState() == boxes[8].getState() && boxes[3].getState() > 0) {
            if (boxes[6].getState() == -1) {
                I = 2;
                J = 0;
            } else if (boxes[7].getState() == -1) {
                I = 2;
                J = 1;
            }
        }

        if (boxes[3].getState() == boxes[2].getState() && boxes[3].getState() > 0) {
            if (boxes[0].getState() == -1) {
                I = 0;
                J = 0;
            } else if (boxes[1].getState() == -1) {
                I = 0;
                J = 1;
            }
        }

        if (boxes[5].getState() == boxes[6].getState() && boxes[5].getState() > 0) {
            if (boxes[8].getState() == -1) {
                I = 2;
                J = 2;
            } else if (boxes[7].getState() == -1) {
                I = 2;
                J = 1;
            }
        }

        if (boxes[5].getState() == boxes[0].getState() && boxes[5].getState() > 0) {
            if (boxes[2].getState() == -1) {
                I = 0;
                J = 2;
            } else if (boxes[1].getState() == -1) {
                I = 0;
                J = 1;
            }
        }

        if (boxes[1].getState() == boxes[6].getState() && boxes[1].getState() > 0) {
            if (boxes[0].getState() == -1) {
                I = 0;
                J = 0;
            } else if (boxes[3].getState() == -1) {
                I = 1;
                J = 0;
            }
        }

        if (boxes[1].getState() == boxes[8].getState() && boxes[1].getState() > 0) {
            if (boxes[2].getState() == -1) {
                I = 0;
                J = 2;
            } else if (boxes[5].getState() == -1) {
                I = 1;
                J = 2;
            }
        }

        if (boxes[7].getState() == boxes[0].getState() && boxes[7].getState() > 0) {
            if (boxes[6].getState() == -1) {
                I = 2;
                J = 0;
            } else if (boxes[3].getState() == -1) {
                I = 1;
                J = 0;
            }
        }

        if (boxes[7].getState() == boxes[2].getState() && boxes[7].getState() > 0) {
            if (boxes[8].getState() == -1) {
                I = 2;
                J = 2;
            } else if (boxes[5].getState() == -1) {
                I = 1;
                J = 2;
            }
        }

        //try not to loose
        if (boxes[0].getState() == boxes[1].getState() && boxes[0].getState() == 1 || boxes[6].getState() == boxes[4].getState() && boxes[4].getState() == 1 || boxes[5].getState() == boxes[8].getState() && boxes[5].getState() == 1) {
            if (boxes[2].getState() == -1) {
                I = 0;
                J = 2;
            }
        }

        if (boxes[2].getState() == boxes[1].getState() && boxes[2].getState() == 1 || boxes[8].getState() == boxes[4].getState() && boxes[4].getState() == 1 || boxes[3].getState() == boxes[6].getState() && boxes[6].getState() == 1) {
            if (boxes[0].getState() == -1) {
                I = 0;
                J = 0;
            }
        }

        if (boxes[0].getState() == boxes[2].getState() && boxes[0].getState() == 1 || boxes[7].getState() == boxes[4].getState() && boxes[4].getState() == 1) {
            if (boxes[1].getState() == -1) {
                System.out.println("Got here");
                I = 0;
                J = 1;
            }
        }

        if (boxes[0].getState() == boxes[6].getState() && boxes[0].getState() == 1 || boxes[4].getState() == boxes[5].getState() && boxes[4].getState() == 1) {
            if (boxes[3].getState() == -1) {
                I = 1;
                J = 0;
            }
        }

        if (boxes[0].getState() == boxes[8].getState() && boxes[0].getState() == 1 || boxes[6].getState() == boxes[2].getState() && boxes[2].getState() == 1 || boxes[1].getState() == boxes[7].getState() && boxes[1].getState() == 1 || boxes[3].getState() == boxes[5].getState() && boxes[3].getState() == 1) {
            if (boxes[4].getState() == -1) {
                I = 1;
                J = 1;
            }
        }

        if (boxes[2].getState() == boxes[8].getState() && boxes[2].getState() == 1 || boxes[3].getState() == boxes[4].getState() && boxes[4].getState() == 1) {
            if (boxes[5].getState() == -1) {
                System.out.println("got here too");
                I = 1;
                J = 2;
            }
        }

        if (boxes[0].getState() == boxes[3].getState() && boxes[0].getState() == 1 || boxes[2].getState() == boxes[4].getState() && boxes[4].getState() == 1 || boxes[7].getState() == boxes[8].getState() && boxes[7].getState() == 1) {
            if (boxes[6].getState() == -1) {
                I = 2;
                J = 0;
            }
        }

        if (boxes[6].getState() == boxes[8].getState() && boxes[6].getState() == 1 || boxes[1].getState() == boxes[4].getState() && boxes[4].getState() == 1) {
            if (boxes[7].getState() == -1) {
                I = 2;
                J = 1;
            }
        }

        if (boxes[0].getState() == boxes[4].getState() && boxes[0].getState() == 1 || boxes[6].getState() == boxes[7].getState() && boxes[7].getState() == 1 || boxes[5].getState() == boxes[2].getState() && boxes[5].getState() == 1) {
            if (boxes[8].getState() == -1) {
                I = 2;
                J = 2;
            }
        }

        //try to win
        if (boxes[0].getState() == boxes[1].getState() && boxes[0].getState() == 2 || boxes[6].getState() == boxes[4].getState() && boxes[4].getState() == 2 || boxes[5].getState() == boxes[8].getState() && boxes[5].getState() == 2) {
            if (boxes[2].getState() == -1) {
                I = 0;
                J = 2;
            }
        }

        if (boxes[2].getState() == boxes[1].getState() && boxes[2].getState() == 2 || boxes[8].getState() == boxes[4].getState() && boxes[4].getState() == 2 || boxes[3].getState() == boxes[6].getState() && boxes[6].getState() == 2) {
            if (boxes[0].getState() == -1) {
                I = 0;
                J = 0;
            }
        }

        if (boxes[0].getState() == boxes[2].getState() && boxes[0].getState() == 2 || boxes[7].getState() == boxes[4].getState() && boxes[4].getState() == 2) {
            if (boxes[1].getState() == -1) {
                System.out.println("Got here");
                I = 0;
                J = 1;
            }
        }

        if (boxes[0].getState() == boxes[6].getState() && boxes[0].getState() == 2 || boxes[4].getState() == boxes[5].getState() && boxes[4].getState() == 2) {
            if (boxes[3].getState() == -1) {
                I = 1;
                J = 0;
            }
        }

        if (boxes[0].getState() == boxes[8].getState() && boxes[0].getState() == 2 || boxes[6].getState() == boxes[2].getState() && boxes[2].getState() == 2 || boxes[1].getState() == boxes[7].getState() && boxes[1].getState() == 2 || boxes[3].getState() == boxes[5].getState() && boxes[3].getState() == 2) {
            if (boxes[4].getState() == -1) {
                I = 1;
                J = 1;
            }
        }

        if (boxes[2].getState() == boxes[8].getState() && boxes[2].getState() == 2 || boxes[3].getState() == boxes[4].getState() && boxes[4].getState() == 2) {
            if (boxes[5].getState() == -1) {
                System.out.println("got here too");
                I = 1;
                J = 2;
            }
        }

        if (boxes[0].getState() == boxes[3].getState() && boxes[0].getState() == 2 || boxes[2].getState() == boxes[4].getState() && boxes[4].getState() == 2 || boxes[7].getState() == boxes[8].getState() && boxes[7].getState() == 2) {
            if (boxes[6].getState() == -1) {
                I = 2;
                J = 0;
            }
        }

        if (boxes[6].getState() == boxes[8].getState() && boxes[6].getState() == 2 || boxes[1].getState() == boxes[4].getState() && boxes[4].getState() == 2) {
            if (boxes[7].getState() == -1) {
                I = 2;
                J = 1;
            }
        }

        if (boxes[0].getState() == boxes[4].getState() && boxes[0].getState() == 2 || boxes[6].getState() == boxes[7].getState() && boxes[7].getState() == 2 || boxes[5].getState() == boxes[2].getState() && boxes[5].getState() == 2) {
            if (boxes[8].getState() == -1) {
                I = 2;
                J = 2;
            }
        }

        //System.out.println("I J " + I + " " + J);
        switch (I) {
            case 0:
                switch (J) {
                    case 0:
                        setCircleBackGround(box11);
                        boxes[0].changeClicked(2);
                        box11.setText(" ");
                        break;
                    case 1:
                        setCircleBackGround(box12);
                        boxes[1].changeClicked(2);
                        box12.setText(" ");
                        break;
                    case 2:
                        setCircleBackGround(box13);
                        boxes[2].changeClicked(2);
                        box13.setText(" ");
                        break;
                }
                break;
            case 1:
                switch (J) {
                    case 0:
                        setCircleBackGround(box21);
                        boxes[3].changeClicked(2);
                        box21.setText(" ");
                        break;
                    case 1:
                        setCircleBackGround(box22);
                        boxes[4].changeClicked(2);
                        box22.setText(" ");
                        break;
                    case 2:
                        setCircleBackGround(box23);
                        boxes[5].changeClicked(2);
                        box23.setText(" ");
                        break;
                }
                break;
            case 2:
                switch (J) {
                    case 0:
                        setCircleBackGround(box31);
                        boxes[6].changeClicked(2);
                        box31.setText(" ");
                        break;
                    case 1:
                        setCircleBackGround(box32);
                        boxes[7].changeClicked(2);
                        box32.setText(" ");
                        break;
                    case 2:
                        setCircleBackGround(box33);
                        boxes[8].changeClicked(2);
                        box33.setText(" ");
                        break;
                }
                break;

        }
        if (won) {
            return;
        }
        try {
            checkHit();
        } catch (ClassNotFoundException ex) {
            logger.log(org.apache.log4j.Level.ERROR,"Class not found !!!");
        } catch (SQLException ex) {
            logger.log(org.apache.log4j.Level.ERROR,"Error in database connection !!!");
        }
        changePlayer();

        board = boards[index];
    }

    private Board[] generateBoards() {

        int emptyCells = board.countEmpty();

        Board[] boards = new Board[emptyCells];

        for (int i = 0; i < emptyCells; i++) {
            boards[i] = board.getCopy();
        }

        int index = 0;
        int[][] b = board.getBoard();

        for (int i = 0; i < Board.SIZE; i++) {
            for (int j = 0; j < Board.SIZE; j++) {
                if (b[i][j] == 0) {
                    boards[index].getBoard()[i][j] = -1;
                    index++;
                }
            }
        }
        return boards;
    }

    private void jumbleBoard() {
        for (int i = 0; i < 9; i++) {
            //System.out.println("Jumbled");
            boxes[i].changeClicked(-1);
        }
    }
}
